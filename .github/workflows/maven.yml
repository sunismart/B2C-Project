name: Build and Deploy

on:
  push:
    branches:
      - master  # Trigger on push to the master branch
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      # Step 3: Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 5: Build the project with Maven
      - name: Build the project with Maven
        run: mvn clean install -f ecommerce-multivendor-backend-master/pom.xml -DskipTests

      # Step 6: SonarQube analysis
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar --file ecommerce-multivendor-backend-master/pom.xml -DskipTests

      # Step 7: Set up Maven settings for Nexus
      - name: Set up Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>nexus-snapshots</id>
                      <username>admin</username>
                      <password>nexus</password>
                    </server>
                    <server>
                      <id>nexus-releases</id>
                      <username>admin</username>
                      <password>nexus</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      # Step 8: Build and deploy to Nexus
      - name: Build and deploy to Nexus
        run: mvn -B clean deploy --file ecommerce-multivendor-backend-master/pom.xml -DskipTests

      # Step 9: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 10: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t sunismart/ecommerce:${{ github.sha }} -f ecommerce-multivendor-backend-master/Dockerfile ecommerce-multivendor-backend-master

      # Step 11: Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      # Step 12: Scan Docker image with Trivy
      - name: Scan Docker image with Trivy
        run: |
          trivy image sunismart/ecommerce:${{ github.sha }}

      # Step 13: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push sunismart/ecommerce:${{ github.sha }}

      # Step 14: Run Docker container
      - name: Run Docker container
        run: |
          docker run -d --name ecommerce-container -p 8080:8080 sunismart/ecommerce:${{ github.sha }}          

     
